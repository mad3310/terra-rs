<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://code.alibabatech.com/schema/dubbo
       http://code.alibabatech.com/schema/dubbo/dubbo.xsd">
    <!-- 提供方应用信息，用于计算依赖关系 -->
    <dubbo:application name="terra-service" owner="matrix" organization="le"/>
    <!-- 使用zookeeper注册中心暴露服务地址 -->
    <dubbo:registry protocol="zookeeper" address="${dubbo.registry.zkAddr}" />
    <!--自动扫描该包路径，省去每个都配合dubbo:service-->
    <dubbo:annotation package="com.le.matrix.redis.service"/>
    <!-- dubbo协议定义 -->
    <dubbo:protocol name="dubbo" port="${dubbo.protocol.port.dubbo}"/>

    <!--使用内置tomcat服务器   可以省去webapp里面内容          !!!与下面二选一-->
    <!--如果直接Main启动/junit启动（一般测试时候用），使用下面配置  -->
    <!--缺省配置-->
    <!--<dubbo:protocol name="rest" port="${dubbo.protocol.port.rest}" threads="500" contextpath="services" server="tomcat" accepts="500"
                    />-->
    <!--使用内置tomcat服务器   可以省去webapp里面内容-->
    <!--自定义配置-->
    <!--<dubbo:protocol name="rest" port="${dubbo.protocol.port.rest}" threads="500" contextpath="services" server="tomcat" accepts="500"
                    extension="com.le.matrix.redistension.tomcat.TraceInterceptor,
                    com.le.matrix.redistension.tomcat.TraceFilter,
                    com.le.matrix.redistension.tomcat.ClientTraceFilter,
                    com.le.matrix.redistension.tomcat.DynamicTraceBinding,
                    com.le.matrix.redistension.tomcat.CustomExceptionMapper,
                    com.alibaba.dubbo.rpc.protocol.rest.support.LoggingFilter"/>-->
    <!--如果使用外部jetty服务器          !!!与上面二选一-->
    <!-- rest协议定义：
        port：和服务器端口保持一致
        contextpath：和web服务器web.xml定义保持一致
        server：默认servlet，在没有在web服务器中运行的时候，可以写tomcat等由应用启动一个web服务器-->
    <dubbo:protocol name="rest" port="${dubbo.protocol.port.rest}" contextpath="services" server="servlet"/>

    <!--暴露服务列表-->
    <!--关于service属性配置看http://dubbo.io/User+Guide-zh.htm#UserGuide-zh-%253Cdubbo%253Aservice%252F%253E-->
    <!--
                  interface     接口名
                  ref           服务对象实现引用
                  retries       远程服务调用重试次数，默认为2，不包括第一次调用，不需要重试请设为0
                  protocol      协议，默认为上面定义的所有协议
                  timeout       远程服务调用超时时间
                  connections   对每个提供者的最大连接数，rmi、http、hessian等短连接协议表示限制连接数，dubbo等长连接协表示建立的长连接个数
                  validation    是否启用JSR303标准注解验证，如果启用，将对方法参数上的注解进行校验
                  version       服务版本，建议使用两位数字版本，如：1.0，通常在接口不兼容时版本号才需要升级
           -->
    <dubbo:service interface="com.le.matrix.redis.facade.IDemo" ref="demoService" validation="true"/>

    <!--<dubbo:reference interface="com.xxx.XxxService">
        <dubbo:method name="findXxx" timeout="3000" retries="2" />
    </dubbo:reference>-->

    <!--TODO    需要再次验证
        1.验证dubbo/rest传对象
        2.验证传对象validate
        3.验证服务端抛出异常，客户端dubbo/rest接收异常
        4.验证服务端异常统一处理，并返回对应http状态码
    -->
</beans>